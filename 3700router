#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math


class Router:
    relations = {}
    sockets = {}
    ports = {}
    table = []

    def processMsg(self, msg):
        dic = json.loads(msg)
        print(dic)
        if dic['type'] == "update":
            self.table.append({'network': dic['msg']['network'], 'netmask': dic['msg']['netmask'], 'peer': dic['src'],
                               'localpref': dic['msg']['localpref'], 'ASPath': dic['msg']['ASPath'],
                               'selfOrigin': dic['msg']['selfOrigin'], 'origin': dic['msg']['origin']})
            temp = dic['msg']
            del temp['localpref']
            del temp['origin']
            del temp['selfOrigin']
            temp['ASPath'].insert(0, self.asn)
            for neighbors in self.relations:
                if dic['src'] != neighbors:
                    self.send(neighbors, json.dumps({'msg': {'netmask': temp['netmask'], 'ASPath': temp['ASPath'],
                                                             'network': temp['network']}, 'src': self.our_addr(neighbors),
                                                     'dst': neighbors, 'type': 'update'}))
        if dic['type'] == "dump":
            for neighbors in self.relations:
                if dic['src'] != neighbors:
                    self.send(neighbors, json.dumps({'src': self.our_addr(neighbors), 'dst': neighbors, 'type': 'table',
                                             'msg': self.table}))


    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))
                self.processMsg(msg)

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
